(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{222:function(t,e,a){"use strict";a.r(e);var v=a(0),_=Object(v.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"vue一些对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue一些对比"}},[t._v("#")]),t._v(" Vue一些对比")]),t._v(" "),a("h4",{attrs:{id:"一、methods和computed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、methods和computed"}},[t._v("#")]),t._v(" 一、methods和computed")]),t._v(" "),a("ul",[a("li",[t._v("computed是计算属性，methods是方法。")]),t._v(" "),a("li",[t._v("computed计算属性是基于它们的依赖进行==缓存==的")]),t._v(" "),a("li",[t._v("computed只有在它的相关依赖发生改变时才会重新求值")]),t._v(" "),a("li",[t._v("而对于method ，只要发生重新渲染，method 调用==总会==执行该函数")]),t._v(" "),a("li",[t._v("==总之：数据量大，需要缓存的时候用computed；每次确实需要重新加载，不需要缓存时用methods==")])]),t._v(" "),a("h4",{attrs:{id:"二、computed和watch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、computed和watch"}},[t._v("#")]),t._v(" 二、computed和watch")]),t._v(" "),a("ul",[a("li",[t._v("计算属性是==计算属性==，==侦听器watch==是侦听器watch")]),t._v(" "),a("li",[t._v("侦听器watch是侦听一个特定的值，当该值变化时执行特定的函数")])]),t._v(" "),a("h5",{attrs:{id:"计算属性computed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算属性computed"}},[t._v("#")]),t._v(" 计算属性computed :")]),t._v(" "),a("ol",[a("li",[t._v("支持缓存，只有依赖数据发生改变，才会重新进行计算")]),t._v(" "),a("li",[t._v("不支持异步，当computed内有异步操作时无效，无法监听数据的变化")]),t._v(" "),a("li",[t._v("computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值")]),t._v(" "),a("li",[t._v("如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed")]),t._v(" "),a("li",[t._v("如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。")]),t._v(" "),a("li",[t._v("computed会在初次加载的时候调用，而watch会在监听到数据改变的时候调用")])]),t._v(" "),a("h5",{attrs:{id:"侦听属性watch："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#侦听属性watch："}},[t._v("#")]),t._v(" 侦听属性watch：")]),t._v(" "),a("ol",[a("li",[t._v("不支持缓存，数据变，直接会触发相应的操作；")]),t._v(" "),a("li",[t._v("watch支持异步；")]),t._v(" "),a("li",[t._v("监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；")]),t._v(" "),a("li",[t._v("当一个属性发生变化时，需要执行对应的操作；一对多；")]),t._v(" "),a("li",[t._v("监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数，\n　　immediate：组件加载立即触发回调函数执行，\n　　deep: 深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变 动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。")])]),t._v(" "),a("h4",{attrs:{id:"三、-router和-route"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、-router和-route"}},[t._v("#")]),t._v(" 三、$router和$route")]),t._v(" "),a("ul",[a("li",[t._v("router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象")]),t._v(" "),a("li",[t._v("route相当于当前正在跳转的路由对象。。可以从里面获取name,path,params,query等")]),t._v(" "),a("li",[t._v("打印this.$route和this.$router，==两个同时存在==。")]),t._v(" "),a("li",[t._v("两者传参方式相同")])])])}],!1,null,null,null);e.default=_.exports}}]);